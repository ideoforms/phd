/** @file settings.h
 *  @brief The header file for the command line option parser
 *  generated by GNU Gengetopt version 2.22.5
 *  http://www.gnu.org/software/gengetopt.
 *  DO NOT modify this file, since it can be overwritten
 *  @author GNU Gengetopt by Lorenzo Bettini */

#ifndef SETTINGS_H
#define SETTINGS_H

/* If we use autoconf.  */
#ifdef HAVE_CONFIG_H
#include "config.h"
#endif

#include <stdio.h> /* for FILE */

#ifdef __cplusplus
extern "C" {
#endif /* __cplusplus */

#ifndef CONFIG_PARSER_PACKAGE
/** @brief the program name (used for printing errors) */
#define CONFIG_PARSER_PACKAGE "imitation-cpp"
#endif

#ifndef CONFIG_PARSER_PACKAGE_NAME
/** @brief the complete program name (used for help and version) */
#define CONFIG_PARSER_PACKAGE_NAME "imitation-cpp"
#endif

#ifndef CONFIG_PARSER_VERSION
/** @brief the program version */
#define CONFIG_PARSER_VERSION "1.0"
#endif

/** @brief Where the command line options are stored */
struct settings_t
{
  const char *help_help; /**< @brief Print help and exit help description.  */
  const char *version_help; /**< @brief Print version and exit help description.  */
  char * topology_arg;	/**< @brief topology						 (default='numeric').  */
  char * topology_orig;	/**< @brief topology						 original value given at command line.  */
  const char *topology_help; /**< @brief topology						 help description.  */
  int popsize_arg;	/**< @brief population size.  */
  char * popsize_orig;	/**< @brief population size original value given at command line.  */
  const char *popsize_help; /**< @brief population size help description.  */
  int bits_arg;	/**< @brief environmental bits.  */
  char * bits_orig;	/**< @brief environmental bits original value given at command line.  */
  const char *bits_help; /**< @brief environmental bits help description.  */
  int steps_arg;	/**< @brief steps to run.  */
  char * steps_orig;	/**< @brief steps to run original value given at command line.  */
  const char *steps_help; /**< @brief steps to run help description.  */
  int trials_arg;	/**< @brief trials to run (default='1').  */
  char * trials_orig;	/**< @brief trials to run original value given at command line.  */
  const char *trials_help; /**< @brief trials to run help description.  */
  int tasks_arg;	/**< @brief environmental tasks (default='1').  */
  char * tasks_orig;	/**< @brief environmental tasks original value given at command line.  */
  const char *tasks_help; /**< @brief environmental tasks help description.  */
  double mu_arg;	/**< @brief s.d. of mutations.  */
  char * mu_orig;	/**< @brief s.d. of mutations original value given at command line.  */
  const char *mu_help; /**< @brief s.d. of mutations help description.  */
  double alpha_arg;	/**< @brief fitness rolloff.  */
  char * alpha_orig;	/**< @brief fitness rolloff original value given at command line.  */
  const char *alpha_help; /**< @brief fitness rolloff help description.  */
  double omega0_arg;	/**< @brief initial metabolism (default='4').  */
  char * omega0_orig;	/**< @brief initial metabolism original value given at command line.  */
  const char *omega0_help; /**< @brief initial metabolism help description.  */
  double p_mut_arg;	/**< @brief prob. of bit mutation.  */
  char * p_mut_orig;	/**< @brief prob. of bit mutation original value given at command line.  */
  const char *p_mut_help; /**< @brief prob. of bit mutation help description.  */
  double p_switch_arg;	/**< @brief prob. of environment change.  */
  char * p_switch_orig;	/**< @brief prob. of environment change original value given at command line.  */
  const char *p_switch_help; /**< @brief prob. of environment change help description.  */
  double p_move_arg;	/**< @brief prob. of agent movement.  */
  char * p_move_orig;	/**< @brief prob. of agent movement original value given at command line.  */
  const char *p_move_help; /**< @brief prob. of agent movement help description.  */
  double p_noise_arg;	/**< @brief prob. of social learning noise.  */
  char * p_noise_orig;	/**< @brief prob. of social learning noise original value given at command line.  */
  const char *p_noise_help; /**< @brief prob. of social learning noise help description.  */
  char * logdir_arg;	/**< @brief path to store log (default='logs').  */
  char * logdir_orig;	/**< @brief path to store log original value given at command line.  */
  const char *logdir_help; /**< @brief path to store log help description.  */
  int log_flag;	/**< @brief logging on/off (default=on).  */
  const char *log_help; /**< @brief logging on/off help description.  */
  int log_every_arg;	/**< @brief interval between logging (default='1000').  */
  char * log_every_orig;	/**< @brief interval between logging original value given at command line.  */
  const char *log_every_help; /**< @brief interval between logging help description.  */
  int dump_every_arg;	/**< @brief interval between dumping agents (default='0').  */
  char * dump_every_orig;	/**< @brief interval between dumping agents original value given at command line.  */
  const char *dump_every_help; /**< @brief interval between dumping agents help description.  */
  int log_dispersion_flag;	/**< @brief log morisita's dispersion index (default=off).  */
  const char *log_dispersion_help; /**< @brief log morisita's dispersion index help description.  */
  int log_agents_at_arg;	/**< @brief log all phenotypes at time N (default='0').  */
  char * log_agents_at_orig;	/**< @brief log all phenotypes at time N original value given at command line.  */
  const char *log_agents_at_help; /**< @brief log all phenotypes at time N help description.  */
  int debug_flag;	/**< @brief debug on/off (default=off).  */
  const char *debug_help; /**< @brief debug on/off help description.  */
  int batch_flag;	/**< @brief batch mode on/off (default=off).  */
  const char *batch_help; /**< @brief batch mode on/off help description.  */
  int metabolism_flag;	/**< @brief metabolism on/off (default=off).  */
  const char *metabolism_help; /**< @brief metabolism on/off help description.  */
  int reproduction_count_arg;	/**< @brief number of reproduction events per step (default='1').  */
  char * reproduction_count_orig;	/**< @brief number of reproduction events per step original value given at command line.  */
  const char *reproduction_count_help; /**< @brief number of reproduction events per step help description.  */
  int strategy_copy_novel_trait_arg;	/**< @brief copy novel traits only (default='0').  */
  char * strategy_copy_novel_trait_orig;	/**< @brief copy novel traits only original value given at command line.  */
  const char *strategy_copy_novel_trait_help; /**< @brief copy novel traits only help description.  */
  int strategy_copy_random_neighbour_arg;	/**< @brief copy random neighbour, not fittest (default='0').  */
  char * strategy_copy_random_neighbour_orig;	/**< @brief copy random neighbour, not fittest original value given at command line.  */
  const char *strategy_copy_random_neighbour_help; /**< @brief copy random neighbour, not fittest help description.  */
  int strategy_copy_best_neighbour_arg;	/**< @brief copy only the most fit neighbour (default='0').  */
  char * strategy_copy_best_neighbour_orig;	/**< @brief copy only the most fit neighbour original value given at command line.  */
  const char *strategy_copy_best_neighbour_help; /**< @brief copy only the most fit neighbour help description.  */
  int strategy_always_assimilate_arg;	/**< @brief always assimilate newly-learned bits (default='0').  */
  char * strategy_always_assimilate_orig;	/**< @brief always assimilate newly-learned bits original value given at command line.  */
  const char *strategy_always_assimilate_help; /**< @brief always assimilate newly-learned bits help description.  */
  int suppress_b_evo_arg;	/**< @brief suppress b_evo (default='0').  */
  char * suppress_b_evo_orig;	/**< @brief suppress b_evo original value given at command line.  */
  const char *suppress_b_evo_help; /**< @brief suppress b_evo help description.  */
  int suppress_b_ind_arg;	/**< @brief suppress b_ind (default='0').  */
  char * suppress_b_ind_orig;	/**< @brief suppress b_ind original value given at command line.  */
  const char *suppress_b_ind_help; /**< @brief suppress b_ind help description.  */
  int suppress_b_soc_arg;	/**< @brief suppress b_soc (default='0').  */
  char * suppress_b_soc_orig;	/**< @brief suppress b_soc original value given at command line.  */
  const char *suppress_b_soc_help; /**< @brief suppress b_soc help description.  */
  double fixed_b_evo_arg;	/**< @brief fixed b_evo.  */
  char * fixed_b_evo_orig;	/**< @brief fixed b_evo original value given at command line.  */
  const char *fixed_b_evo_help; /**< @brief fixed b_evo help description.  */
  double fixed_b_ind_arg;	/**< @brief fixed b_ind.  */
  char * fixed_b_ind_orig;	/**< @brief fixed b_ind original value given at command line.  */
  const char *fixed_b_ind_help; /**< @brief fixed b_ind help description.  */
  double fixed_b_soc_arg;	/**< @brief fixed b_soc.  */
  char * fixed_b_soc_orig;	/**< @brief fixed b_soc original value given at command line.  */
  const char *fixed_b_soc_help; /**< @brief fixed b_soc help description.  */
  double initial_b_evo_arg;	/**< @brief initial b_evo.  */
  char * initial_b_evo_orig;	/**< @brief initial b_evo original value given at command line.  */
  const char *initial_b_evo_help; /**< @brief initial b_evo help description.  */
  double initial_b_ind_arg;	/**< @brief initial b_ind.  */
  char * initial_b_ind_orig;	/**< @brief initial b_ind original value given at command line.  */
  const char *initial_b_ind_help; /**< @brief initial b_ind help description.  */
  double initial_b_soc_arg;	/**< @brief initial b_soc.  */
  char * initial_b_soc_orig;	/**< @brief initial b_soc original value given at command line.  */
  const char *initial_b_soc_help; /**< @brief initial b_soc help description.  */
  double initial_geno_bits_arg;	/**< @brief # bits to set to 1.  */
  char * initial_geno_bits_orig;	/**< @brief # bits to set to 1 original value given at command line.  */
  const char *initial_geno_bits_help; /**< @brief # bits to set to 1 help description.  */
  int thoroughbred_arg;	/**< @brief thoroughbred behaviours (default='0').  */
  char * thoroughbred_orig;	/**< @brief thoroughbred behaviours original value given at command line.  */
  const char *thoroughbred_help; /**< @brief thoroughbred behaviours help description.  */
  double thoroughbred_mu_arg;	/**< @brief thoroughbred mutation prob (default='0.0').  */
  char * thoroughbred_mu_orig;	/**< @brief thoroughbred mutation prob original value given at command line.  */
  const char *thoroughbred_mu_help; /**< @brief thoroughbred mutation prob help description.  */
  int perturbation_flag;	/**< @brief perturbation on/off (default=off).  */
  const char *perturbation_help; /**< @brief perturbation on/off help description.  */
  int perturbation_time_arg;	/**< @brief perturbation timestep (default='0').  */
  char * perturbation_time_orig;	/**< @brief perturbation timestep original value given at command line.  */
  const char *perturbation_time_help; /**< @brief perturbation timestep help description.  */
  double perturbation_size_arg;	/**< @brief perturbation magnitude (default='1.0').  */
  char * perturbation_size_orig;	/**< @brief perturbation magnitude original value given at command line.  */
  const char *perturbation_size_help; /**< @brief perturbation magnitude help description.  */
  int invasion_time_arg;	/**< @brief invasion time (default='0').  */
  char * invasion_time_orig;	/**< @brief invasion time original value given at command line.  */
  const char *invasion_time_help; /**< @brief invasion time help description.  */
  double invasion_ratio_arg;	/**< @brief % of population to invade (default='0.125').  */
  char * invasion_ratio_orig;	/**< @brief % of population to invade original value given at command line.  */
  const char *invasion_ratio_help; /**< @brief % of population to invade help description.  */
  int neighbourhood_size_arg;	/**< @brief neighbourhood size for numeric model (default='0').  */
  char * neighbourhood_size_orig;	/**< @brief neighbourhood size for numeric model original value given at command line.  */
  const char *neighbourhood_size_help; /**< @brief neighbourhood size for numeric model help description.  */
  char * conf_file_arg;	/**< @brief config file to read (default='settings.conf').  */
  char * conf_file_orig;	/**< @brief config file to read original value given at command line.  */
  const char *conf_file_help; /**< @brief config file to read help description.  */
  int ca_width_arg;	/**< @brief ca width (default='16').  */
  char * ca_width_orig;	/**< @brief ca width original value given at command line.  */
  const char *ca_width_help; /**< @brief ca width help description.  */
  int ca_non_adjacent_birth_arg;	/**< @brief ca: position offspring randomly (default='0').  */
  char * ca_non_adjacent_birth_orig;	/**< @brief ca: position offspring randomly original value given at command line.  */
  const char *ca_non_adjacent_birth_help; /**< @brief ca: position offspring randomly help description.  */
  int ca_colocated_birth_arg;	/**< @brief ca: offspring in same cell as parent (default='0').  */
  char * ca_colocated_birth_orig;	/**< @brief ca: offspring in same cell as parent original value given at command line.  */
  const char *ca_colocated_birth_help; /**< @brief ca: offspring in same cell as parent help description.  */
  int graph_degree_arg;	/**< @brief graph: degree (default='2').  */
  char * graph_degree_orig;	/**< @brief graph: degree original value given at command line.  */
  const char *graph_degree_help; /**< @brief graph: degree help description.  */
  int abm_width_arg;	/**< @brief abm width (default='512').  */
  char * abm_width_orig;	/**< @brief abm width original value given at command line.  */
  const char *abm_width_help; /**< @brief abm width help description.  */
  int abm_neighbourhood_type_arg;	/**< @brief neighbourhood type (default='0').  */
  char * abm_neighbourhood_type_orig;	/**< @brief neighbourhood type original value given at command line.  */
  const char *abm_neighbourhood_type_help; /**< @brief neighbourhood type help description.  */
  int abm_neighbourhood_size_arg;	/**< @brief neighbourhood size (default='64').  */
  char * abm_neighbourhood_size_orig;	/**< @brief neighbourhood size original value given at command line.  */
  const char *abm_neighbourhood_size_help; /**< @brief neighbourhood size help description.  */
  int spatial_variance_arg;	/**< @brief spatial variance (default='0').  */
  char * spatial_variance_orig;	/**< @brief spatial variance original value given at command line.  */
  const char *spatial_variance_help; /**< @brief spatial variance help description.  */
  int spatial_patch_size_arg;	/**< @brief spatial patch size (default='1').  */
  char * spatial_patch_size_orig;	/**< @brief spatial patch size original value given at command line.  */
  const char *spatial_patch_size_help; /**< @brief spatial patch size help description.  */
  int frequency_inverse_payoff_arg;	/**< @brief frequency inverse payoff (default='0').  */
  char * frequency_inverse_payoff_orig;	/**< @brief frequency inverse payoff original value given at command line.  */
  const char *frequency_inverse_payoff_help; /**< @brief frequency inverse payoff help description.  */
  int movement_arg;	/**< @brief movement on/off (default='0').  */
  char * movement_orig;	/**< @brief movement on/off original value given at command line.  */
  const char *movement_help; /**< @brief movement on/off help description.  */
  int movement_cohesion_genetic_arg;	/**< @brief movement cohesion governed by genes (default='1').  */
  char * movement_cohesion_genetic_orig;	/**< @brief movement cohesion governed by genes original value given at command line.  */
  const char *movement_cohesion_genetic_help; /**< @brief movement cohesion governed by genes help description.  */
  int movement_rate_genetic_arg;	/**< @brief movement rate governed by genes (default='1').  */
  char * movement_rate_genetic_orig;	/**< @brief movement rate governed by genes original value given at command line.  */
  const char *movement_rate_genetic_help; /**< @brief movement rate governed by genes help description.  */
  char * payoff_distribution_arg;	/**< @brief payoff distribution (default='uniform').  */
  char * payoff_distribution_orig;	/**< @brief payoff distribution original value given at command line.  */
  const char *payoff_distribution_help; /**< @brief payoff distribution help description.  */
  double payoff_correlation_mu_arg;	/**< @brief payoff correlation mu (default='0.1').  */
  char * payoff_correlation_mu_orig;	/**< @brief payoff correlation mu original value given at command line.  */
  const char *payoff_correlation_mu_help; /**< @brief payoff correlation mu help description.  */
  double payoff_depletion_rate_arg;	/**< @brief payoff depletion rate (default='0.0').  */
  char * payoff_depletion_rate_orig;	/**< @brief payoff depletion rate original value given at command line.  */
  const char *payoff_depletion_rate_help; /**< @brief payoff depletion rate help description.  */
  double payoff_regeneration_rate_arg;	/**< @brief payoff regeneration rate (default='0.0').  */
  char * payoff_regeneration_rate_orig;	/**< @brief payoff regeneration rate original value given at command line.  */
  const char *payoff_regeneration_rate_help; /**< @brief payoff regeneration rate help description.  */
  double structured_landscape_detail_arg;	/**< @brief landscape detail (default='0.5').  */
  char * structured_landscape_detail_orig;	/**< @brief landscape detail original value given at command line.  */
  const char *structured_landscape_detail_help; /**< @brief landscape detail help description.  */
  double structured_landscape_gradient_arg;	/**< @brief landscape gradient (default='0.5').  */
  char * structured_landscape_gradient_orig;	/**< @brief landscape gradient original value given at command line.  */
  const char *structured_landscape_gradient_help; /**< @brief landscape gradient help description.  */
  double structured_landscape_abundance_arg;	/**< @brief landscape abundance (default='0.5').  */
  char * structured_landscape_abundance_orig;	/**< @brief landscape abundance original value given at command line.  */
  const char *structured_landscape_abundance_help; /**< @brief landscape abundance help description.  */
  double fitness_objective_bimodal_arg;	/**< @brief bimodal peak (default='0.0').  */
  char * fitness_objective_bimodal_orig;	/**< @brief bimodal peak original value given at command line.  */
  const char *fitness_objective_bimodal_help; /**< @brief bimodal peak help description.  */
  int fitness_initial_zero_arg;	/**< @brief zero init genotype (default='0').  */
  char * fitness_initial_zero_orig;	/**< @brief zero init genotype original value given at command line.  */
  const char *fitness_initial_zero_help; /**< @brief zero init genotype help description.  */
  char * selection_method_arg;	/**< @brief roulette or tournament (default='roulette').  */
  char * selection_method_orig;	/**< @brief roulette or tournament original value given at command line.  */
  const char *selection_method_help; /**< @brief roulette or tournament help description.  */
  int selection_tournament_size_arg;	/**< @brief tournament size (default='8').  */
  char * selection_tournament_size_orig;	/**< @brief tournament size original value given at command line.  */
  const char *selection_tournament_size_help; /**< @brief tournament size help description.  */
  
  unsigned int help_given ;	/**< @brief Whether help was given.  */
  unsigned int version_given ;	/**< @brief Whether version was given.  */
  unsigned int topology_given ;	/**< @brief Whether topology was given.  */
  unsigned int popsize_given ;	/**< @brief Whether popsize was given.  */
  unsigned int bits_given ;	/**< @brief Whether bits was given.  */
  unsigned int steps_given ;	/**< @brief Whether steps was given.  */
  unsigned int trials_given ;	/**< @brief Whether trials was given.  */
  unsigned int tasks_given ;	/**< @brief Whether tasks was given.  */
  unsigned int mu_given ;	/**< @brief Whether mu was given.  */
  unsigned int alpha_given ;	/**< @brief Whether alpha was given.  */
  unsigned int omega0_given ;	/**< @brief Whether omega0 was given.  */
  unsigned int p_mut_given ;	/**< @brief Whether p_mut was given.  */
  unsigned int p_switch_given ;	/**< @brief Whether p_switch was given.  */
  unsigned int p_move_given ;	/**< @brief Whether p_move was given.  */
  unsigned int p_noise_given ;	/**< @brief Whether p_noise was given.  */
  unsigned int logdir_given ;	/**< @brief Whether logdir was given.  */
  unsigned int log_given ;	/**< @brief Whether log was given.  */
  unsigned int log_every_given ;	/**< @brief Whether log-every was given.  */
  unsigned int dump_every_given ;	/**< @brief Whether dump-every was given.  */
  unsigned int log_dispersion_given ;	/**< @brief Whether log-dispersion was given.  */
  unsigned int log_agents_at_given ;	/**< @brief Whether log-agents-at was given.  */
  unsigned int debug_given ;	/**< @brief Whether debug was given.  */
  unsigned int batch_given ;	/**< @brief Whether batch was given.  */
  unsigned int metabolism_given ;	/**< @brief Whether metabolism was given.  */
  unsigned int reproduction_count_given ;	/**< @brief Whether reproduction-count was given.  */
  unsigned int strategy_copy_novel_trait_given ;	/**< @brief Whether strategy-copy-novel-trait was given.  */
  unsigned int strategy_copy_random_neighbour_given ;	/**< @brief Whether strategy-copy-random-neighbour was given.  */
  unsigned int strategy_copy_best_neighbour_given ;	/**< @brief Whether strategy-copy-best-neighbour was given.  */
  unsigned int strategy_always_assimilate_given ;	/**< @brief Whether strategy-always-assimilate was given.  */
  unsigned int suppress_b_evo_given ;	/**< @brief Whether suppress-b-evo was given.  */
  unsigned int suppress_b_ind_given ;	/**< @brief Whether suppress-b-ind was given.  */
  unsigned int suppress_b_soc_given ;	/**< @brief Whether suppress-b-soc was given.  */
  unsigned int fixed_b_evo_given ;	/**< @brief Whether fixed-b-evo was given.  */
  unsigned int fixed_b_ind_given ;	/**< @brief Whether fixed-b-ind was given.  */
  unsigned int fixed_b_soc_given ;	/**< @brief Whether fixed-b-soc was given.  */
  unsigned int initial_b_evo_given ;	/**< @brief Whether initial-b-evo was given.  */
  unsigned int initial_b_ind_given ;	/**< @brief Whether initial-b-ind was given.  */
  unsigned int initial_b_soc_given ;	/**< @brief Whether initial-b-soc was given.  */
  unsigned int initial_geno_bits_given ;	/**< @brief Whether initial-geno-bits was given.  */
  unsigned int thoroughbred_given ;	/**< @brief Whether thoroughbred was given.  */
  unsigned int thoroughbred_mu_given ;	/**< @brief Whether thoroughbred-mu was given.  */
  unsigned int perturbation_given ;	/**< @brief Whether perturbation was given.  */
  unsigned int perturbation_time_given ;	/**< @brief Whether perturbation-time was given.  */
  unsigned int perturbation_size_given ;	/**< @brief Whether perturbation-size was given.  */
  unsigned int invasion_time_given ;	/**< @brief Whether invasion-time was given.  */
  unsigned int invasion_ratio_given ;	/**< @brief Whether invasion-ratio was given.  */
  unsigned int neighbourhood_size_given ;	/**< @brief Whether neighbourhood-size was given.  */
  unsigned int conf_file_given ;	/**< @brief Whether conf-file was given.  */
  unsigned int ca_width_given ;	/**< @brief Whether ca-width was given.  */
  unsigned int ca_non_adjacent_birth_given ;	/**< @brief Whether ca-non-adjacent-birth was given.  */
  unsigned int ca_colocated_birth_given ;	/**< @brief Whether ca-colocated-birth was given.  */
  unsigned int graph_degree_given ;	/**< @brief Whether graph-degree was given.  */
  unsigned int abm_width_given ;	/**< @brief Whether abm-width was given.  */
  unsigned int abm_neighbourhood_type_given ;	/**< @brief Whether abm-neighbourhood-type was given.  */
  unsigned int abm_neighbourhood_size_given ;	/**< @brief Whether abm-neighbourhood-size was given.  */
  unsigned int spatial_variance_given ;	/**< @brief Whether spatial-variance was given.  */
  unsigned int spatial_patch_size_given ;	/**< @brief Whether spatial-patch-size was given.  */
  unsigned int frequency_inverse_payoff_given ;	/**< @brief Whether frequency-inverse-payoff was given.  */
  unsigned int movement_given ;	/**< @brief Whether movement was given.  */
  unsigned int movement_cohesion_genetic_given ;	/**< @brief Whether movement-cohesion-genetic was given.  */
  unsigned int movement_rate_genetic_given ;	/**< @brief Whether movement-rate-genetic was given.  */
  unsigned int payoff_distribution_given ;	/**< @brief Whether payoff-distribution was given.  */
  unsigned int payoff_correlation_mu_given ;	/**< @brief Whether payoff-correlation-mu was given.  */
  unsigned int payoff_depletion_rate_given ;	/**< @brief Whether payoff-depletion-rate was given.  */
  unsigned int payoff_regeneration_rate_given ;	/**< @brief Whether payoff-regeneration-rate was given.  */
  unsigned int structured_landscape_detail_given ;	/**< @brief Whether structured-landscape-detail was given.  */
  unsigned int structured_landscape_gradient_given ;	/**< @brief Whether structured-landscape-gradient was given.  */
  unsigned int structured_landscape_abundance_given ;	/**< @brief Whether structured-landscape-abundance was given.  */
  unsigned int fitness_objective_bimodal_given ;	/**< @brief Whether fitness-objective-bimodal was given.  */
  unsigned int fitness_initial_zero_given ;	/**< @brief Whether fitness-initial-zero was given.  */
  unsigned int selection_method_given ;	/**< @brief Whether selection-method was given.  */
  unsigned int selection_tournament_size_given ;	/**< @brief Whether selection-tournament-size was given.  */

} ;

/** @brief The additional parameters to pass to parser functions */
struct config_parser_params
{
  int override; /**< @brief whether to override possibly already present options (default 0) */
  int initialize; /**< @brief whether to initialize the option structure settings_t (default 1) */
  int check_required; /**< @brief whether to check that all required options were provided (default 1) */
  int check_ambiguity; /**< @brief whether to check for options already specified in the option structure settings_t (default 0) */
  int print_errors; /**< @brief whether getopt_long should print an error message for a bad option (default 1) */
} ;

/** @brief the purpose string of the program */
extern const char *settings_t_purpose;
/** @brief the usage string of the program */
extern const char *settings_t_usage;
/** @brief all the lines making the help output */
extern const char *settings_t_help[];

/**
 * The command line parser
 * @param argc the number of command line options
 * @param argv the command line options
 * @param args_info the structure where option information will be stored
 * @return 0 if everything went fine, NON 0 if an error took place
 */
int config_parser (int argc, char **argv,
  struct settings_t *args_info);

/**
 * The command line parser (version with additional parameters - deprecated)
 * @param argc the number of command line options
 * @param argv the command line options
 * @param args_info the structure where option information will be stored
 * @param override whether to override possibly already present options
 * @param initialize whether to initialize the option structure my_args_info
 * @param check_required whether to check that all required options were provided
 * @return 0 if everything went fine, NON 0 if an error took place
 * @deprecated use config_parser_ext() instead
 */
int config_parser2 (int argc, char **argv,
  struct settings_t *args_info,
  int override, int initialize, int check_required);

/**
 * The command line parser (version with additional parameters)
 * @param argc the number of command line options
 * @param argv the command line options
 * @param args_info the structure where option information will be stored
 * @param params additional parameters for the parser
 * @return 0 if everything went fine, NON 0 if an error took place
 */
int config_parser_ext (int argc, char **argv,
  struct settings_t *args_info,
  struct config_parser_params *params);

/**
 * Save the contents of the option struct into an already open FILE stream.
 * @param outfile the stream where to dump options
 * @param args_info the option struct to dump
 * @return 0 if everything went fine, NON 0 if an error took place
 */
int config_parser_dump(FILE *outfile,
  struct settings_t *args_info);

/**
 * Save the contents of the option struct into a (text) file.
 * This file can be read by the config file parser (if generated by gengetopt)
 * @param filename the file where to save
 * @param args_info the option struct to save
 * @return 0 if everything went fine, NON 0 if an error took place
 */
int config_parser_file_save(const char *filename,
  struct settings_t *args_info);

/**
 * Print the help
 */
void config_parser_print_help(void);
/**
 * Print the version
 */
void config_parser_print_version(void);

/**
 * Initializes all the fields a config_parser_params structure 
 * to their default values
 * @param params the structure to initialize
 */
void config_parser_params_init(struct config_parser_params *params);

/**
 * Allocates dynamically a config_parser_params structure and initializes
 * all its fields to their default values
 * @return the created and initialized config_parser_params structure
 */
struct config_parser_params *config_parser_params_create(void);

/**
 * Initializes the passed settings_t structure's fields
 * (also set default values for options that have a default)
 * @param args_info the structure to initialize
 */
void config_parser_init (struct settings_t *args_info);
/**
 * Deallocates the string fields of the settings_t structure
 * (but does not deallocate the structure itself)
 * @param args_info the structure to deallocate
 */
void config_parser_free (struct settings_t *args_info);

/**
 * The config file parser (deprecated version)
 * @param filename the name of the config file
 * @param args_info the structure where option information will be stored
 * @param override whether to override possibly already present options
 * @param initialize whether to initialize the option structure my_args_info
 * @param check_required whether to check that all required options were provided
 * @return 0 if everything went fine, NON 0 if an error took place
 * @deprecated use config_parser_config_file() instead
 */
int config_parser_configfile (const char *filename,
  struct settings_t *args_info,
  int override, int initialize, int check_required);

/**
 * The config file parser
 * @param filename the name of the config file
 * @param args_info the structure where option information will be stored
 * @param params additional parameters for the parser
 * @return 0 if everything went fine, NON 0 if an error took place
 */
int config_parser_config_file (const char *filename,
  struct settings_t *args_info,
  struct config_parser_params *params);

/**
 * Checks that all the required options were specified
 * @param args_info the structure to check
 * @param prog_name the name of the program that will be used to print
 *   possible errors
 * @return
 */
int config_parser_required (struct settings_t *args_info,
  const char *prog_name);


#ifdef __cplusplus
}
#endif /* __cplusplus */
#endif /* SETTINGS_H */
